var robot = 0
var break = 0
i = 0
ignore = {}
azimuth = {}

#To check for robots mistaken as obstacles
function check_robot(angle){
break=0
neighbors.foreach(function(rid, data){
if((angle > data.azimuth-0.0436) and (angle < data.azimuth+0.0436) and break == 0 and key!=id)
{log("False positive:", angle, "		", data.azimuth)
 false_positives = false_positives+1
	ignore[id] = false_positives
break = 1
}
})
log("Final false positives:", ignore[id])
return (ignore[id])
}

function init() {
size_barrier = stigmergy.create(2)
if(id == 0)
	rank = 'seed'
seed_id = 0
azimuth[id] = 0
}


function step() {
ignore[id] = 0
sensor_count = 0
#find_perimeter_bots()
	neighbors.foreach(function(rid, data){
	neighbors.broadcast(string.tostring(rid), data.azimuth)
})

#Get bot's relative azimuth as seen by other bots
neighbors.listen(string.tostring(id), function(vid, value, rid){
if(value <= 0)
	value = value +math.pi
else 
	value = value - math.pi
log(id,"	", rid, "	 ", value)
azimuth[rid] = value
})


false_positives = 0
  foreach(ultrasound, function(key, value) {
			#Gauge obstacle size by integrating sensor readings from all bots 
			if(ultrasound[key]["value"]>0 ) {
				sensor_count = sensor_count+1
				log("Checking for object for ID", id, ":Angle", ultrasound[key]["angle"])			
				robot = check_robot(ultrasound[key]["angle"])		
			}
		})
				legit_count =  sensor_count-robot
				log("Sensor count:", sensor_count)
				log("Legitimate count:",legit_count)
				#debug.print(legit_count)
#Separate the bots in the immediate vicinity of the obstacle 
horizontals = neighbors.filter(function(rid, data){
return (math.abs(data.azimuth)>math.pi/4 and math.abs(data.azimuth)<0.75*math.pi) })
#Consensus on size
if(legit_count >0 and (rank == 'seed' or horizontals.count()!=0)and i >2 )
{ size_barrier.put(id, "a")
log("ID", id, "sees an obstacle. Sensor count:", sensor_count)
debug.print(size_barrier.size())
}
if(id == seed_id and size_barrier.size() >= 0.7*horizontals.count())
{log("Big object")
}
i = i+1	
}


# This function is executed every time you press the 'reset'
# button in the GUI. It is supposed to restore the state
# of the controller to whatever it was right after init() was
# called. The state of sensors and actuators is reset
# automatically by ARGoS.
function reset() {
   # put your code here
}



# This function is executed only once, when the robot is removed
# from the simulation
function destroy() {
   # put your code here
}
